@use "sass:math";
@use "sass:map";

@use "../abstracts/grid-variables" as var;
@use "../abstracts/grid-mixins" as mixins;

%gutter-padding {
    padding-left: calc(var(--grid-gutter-x) * 0.5);
    padding-right: calc(var(--grid-gutter-x) * 0.5);
}

// ? Container
.container-fluid {
    --grid-gutter-x: #{var.$grid-gutter-width};
    --grid-gutter-y: 0;

    width: 100%;
    margin-left: auto;
    margin-right: auto;
    @extend %gutter-padding;
}

.container {
    @extend .container-fluid;
}

// ? Row
.row {
    display: flex;
    flex-wrap: wrap;
    margin-left: -#{var.$grid-gutter-width * 0.5};
    margin-right: -#{var.$grid-gutter-width * 0.5};
    margin-top: calc(-1 * var(--grid-gutter-y));

    > * {
        @extend %gutter-padding;
        margin-top: var(--grid-gutter-y);
    }
}

// ? Column
.col {
    flex: 1 0;
}

@each $breakpoint, $dimension in var.$grid-breakpoints {
    $max-width: map.get(var.$container-max-widths, $breakpoint);
    $infix: if($breakpoint == "xxl", "", "-#{$breakpoint}");

    @include mixins.make-media-query($dimension) {
        // ? Container
        .container {
            max-width: $max-width;
        }

        // ? Row Columns
        @include mixins.make-row-columns($infix);

        // ? Columns
        @include mixins.make-columns($infix);

        // ? Offset
        @include mixins.make-offsets($infix);

        // ? Gutters
        @include mixins.make-gutters($infix);
    }
}
